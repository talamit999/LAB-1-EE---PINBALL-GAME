// bitmap file 
// (c) Technion IIT, Department of Electrical Engineering 2021 
// generated bythe automatic Python tool 
 
 
 module PlusMatrixBitMap (

					input	logic	clk, 
					input	logic	resetN, 
					input logic	[10:0] offsetX,// offset from top left  position 
					input logic	[10:0] offsetY, 
					input	logic	InsideRectangle, //input that the pixel is within a bracket 
					input logic startOfFrame,
					input logic [2:0] offset, //define the offset (so the 2 different shapes will seem in offset to one another)
 
					output	logic	drawingRequest, //output that the pixel should be dispalyed 
					output	logic	[7:0] RGBout  //rgb value from the bitmap 
 ) ; 
 
 
 
 // logic and parameters

localparam logic [7:0] TRANSPARENT_ENCODING = 8'h00 ;// RGB value in the bitmap representing a transparent pixel  

localparam logic [7:0] PURPLE = 8'h82 ;

logic [2:0] slowCounter=3'b000;     //count until 5 to present the right degree: 0, 15, 30, 45, 60, 75
logic [5:0] fastCounter=4'b0000;  //count until 15 and change the slow mode

localparam logic [2:0] DEG0 = 3'b0, DEG15 = 3'b001, DEG30=3'b010, DEG45= 3'b011, DEG60 =3'b100, DEG75 =3'b101 ;
localparam logic [3:0] MIN_COUNT = 4'b0 , MAX_COUNT = 4'b1111;

logic [2:0] curr_state = 3'b000; //the current bitmap to show (including offset)

// generating the bitmap


logic[3:0][0:31][0:31] object_colors = { 
 
 // 0 degress
  {32'b00000000000000111100000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b01111111111111111111111111111110,
	32'b11111111111111111111111111111111,
	32'b11111111111111111111111111111111,
	32'b11111111111111111111111111111111,
	32'b11111111111111111111111111111111,
	32'b01111111111111111111111111111110,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000001111110000000000000,
	32'b00000000000000111100000000000000}
	
	,
	// 15 degrees
  {32'b00000000000111000000000000000000,
	32'b00000000001111100000000000000000,
	32'b00000000011111110000000000000000,
	32'b00000000011111110000000000000000,
	32'b00000000001111110000000000000000,
	32'b00000000001111110000000000000000,
	32'b00000000001111111000000000000000,
	32'b00000000001111111000000000000000,
	32'b00000000000111111000000000000000,
	32'b00000000000111111100000000001100,
	32'b00000000000111111100000011111110,
	32'b00000000000111111100111111111111,
	32'b00000000000011111111111111111111,
	32'b00000000000011111111111111111111,
	32'b00000000011111111111111111111110,
	32'b00000111111111111111111111111100,
	32'b00111111111111111111111111000000,
	32'b01111111111111111111110000000000,
	32'b11111111111111111111000000000000,
	32'b11111111111111111111000000000000,
	32'b11111111111000111111000000000000,
	32'b01111110000000111111100000000000,
	32'b00000000000000111111100000000000,
	32'b00000000000000011111100000000000,
	32'b00000000000000011111100000000000,
	32'b00000000000000011111110000000000,
	32'b00000000000000011111110000000000,
	32'b00000000000000001111110000000000,
	32'b00000000000000001111111000000000,
	32'b00000000000000001111111000000000,
	32'b00000000000000000111110000000000,
	32'b00000000000000000011100000000000}
	
	,
	// 30 degrees
  {32'b00000001110000000000000000000000,
	32'b00000011111100000000000000000000,
	32'b00000111111100000000000000000000,
	32'b00000111111110000000000000000000,
	32'b00000111111110000000000000000000,
	32'b00000011111111000000000000011100,
	32'b00000001111111000000000001111110,
	32'b00000001111111100000000011111111,
	32'b00000000111111110000001111111111,
	32'b00000000111111110000111111111111,
	32'b00000000011111111011111111111110,
	32'b00000000011111111111111111111100,
	32'b00000000001111111111111111111000,
	32'b00000000000111111111111111100000,
	32'b00000000000111111111111110000000,
	32'b00000000001111111111111100000000,
	32'b00000000111111111111110000000000,
	32'b00000011111111111111100000000000,
	32'b00000111111111111111100000000000,
	32'b00011111111111111111110000000000,
	32'b01111111111111111111111000000000,
	32'b11111111111110011111111000000000,
	32'b11111111111000001111111100000000,
	32'b11111111110000001111111100000000,
	32'b11111111000000000111111110000000,
	32'b01111100000000000111111110000000,
	32'b00010000000000000011111111000000,
	32'b00000000000000000001111111000000,
	32'b00000000000000000001111111100000,
	32'b00000000000000000000111111000000,
	32'b00000000000000000000111111000000,
	32'b00000000000000000000001110000000}
	
	,
	// 45 degrees
  {32'b00000000000000000000000000000000,
	32'b00011110000000000000000001111000,
	32'b00111111000000000000000011111100,
	32'b01111111100000000000000111111100,
	32'b01111111110000000000001111111110,
	32'b01111111111000000000011111111110,
	32'b01111111111100000000111111111100,
	32'b00111111111110000001111111111000,
	32'b00011111111111000011111111110000,
	32'b00001111111111100111111111100000,
	32'b00000111111111111111111111000000,
	32'b00000011111111111111111110000000,
	32'b00000001111111111111111100000000,
	32'b00000000111111111111111000000000,
	32'b00000000011111111111110000000000,
	32'b00000000001111111111100000000000,
	32'b00000000001111111111110000000000,
	32'b00000000011111111111111000000000,
	32'b00000000111111111111111100000000,
	32'b00000001111111111111111110000000,
	32'b00000011111111111111111111000000,
	32'b00000111111111101111111111100000,
	32'b00001111111111000111111111110000,
	32'b00011111111110000011111111111000,
	32'b00111111111100000001111111111100,
	32'b01111111111000000000111111111100,
	32'b01111111110000000000011111111110,
	32'b01111111100000000000001111111110,
	32'b01111111000000000000000111111100,
	32'b00111110000000000000000011111000,
	32'b00001100000000000000000000110000,
	32'b00000000000000000000000000000000}				};
 
 // pipeline (ff) to get the pixel color from the array 	 
//////////--------------------------------------------------------------------------------------------------------------= 
always_ff@(posedge clk or negedge resetN) 
begin 
	if(!resetN) begin 
		RGBout <=	TRANSPARENT_ENCODING; 
		fastCounter<= MIN_COUNT;
		slowCounter<= DEG0;
	end 
	else begin
		RGBout <= TRANSPARENT_ENCODING ; // default  
		if(startOfFrame) begin
			if(fastCounter == MAX_COUNT) begin
		
				fastCounter <= MIN_COUNT;
				//CHANGE DEGREE
				if(slowCounter == DEG75)
					slowCounter <= DEG0;
				else slowCounter<= slowCounter + 1;
			
			end
			else fastCounter <= fastCounter + 1; 
		end
		if (InsideRectangle == 1'b1 ) 
		begin // inside an external bracket  
			
			if((slowCounter + offset) > DEG75)
				curr_state <= slowCounter + offset - 3'b110;
			else curr_state <= slowCounter + offset;
			
			// divide by 2 the offset, to extend every bit in bitMap to 2*2 bits 
			case(curr_state)
				default: if(object_colors[curr_state][offsetY[10:1]][offsetX[10:1]]) 
									RGBout <= PURPLE;
				DEG60:  if(object_colors[2][31-offsetY[10:1]][offsetX[10:1]]) 
									RGBout <= PURPLE;
				DEG75:  if(object_colors[1][31-offsetY[10:1]][offsetX[10:1]]) 
									RGBout <= PURPLE;
			endcase
		end  	 
		 
	end 
end 
 
//////////--------------------------------------------------------------------------------------------------------------= 
// decide if to draw the pixel or not 
assign drawingRequest = (RGBout != TRANSPARENT_ENCODING ) ? 1'b1 : 1'b0 ; // get optional transparent command from the bitmpap   
 
endmodule 


