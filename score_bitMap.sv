// bitmap file 
// (c) Technion IIT, Department of Electrical Engineering 2021 
// generated bythe automatic Python tool 
 
 
 module score_bitMap (

					input	logic	clk, 
					input	logic	resetN, 
					input logic	[10:0] offsetX,// offset from top left  position 
					input logic	[10:0] offsetY, 
					input	logic	InsideRectangle, //input that the pixel is within a bracket 
 
					output	logic	drawingRequest, //output that the pixel should be dispalyed 
					output	logic	[7:0] RGBout  //rgb value from the bitmap  
 ) ; 
 
 
// generating the bitmap 

localparam logic [7:0] COLOR_ENCODING = 8'hFF ;// RGB value in the bitmap representing the BITMAP coolor
localparam logic [7:0] TRANSPARENT_ENCODING = 8'h00 ;// RGB value in the bitmap representing a transparent pixel  
logic[0:31][0:63] object_colors = {
	64'b0000000000000000000000000000000000000000000000000000000000000000,
	64'b0001111000000001111100000011111100000011111100000011111111000000,
	64'b0011111100000011111110000111111110000011111110000011111111000000,
	64'b0111111110000111111110000111111110000011111111000011111111000000,
	64'b0111001110000111111111001111001111000011111111000011111111000000,
	64'b0110000110001110000111001110000111000011000111000011000000000000,
	64'b0110000000001110000011011100000011100011000011100011000000000000,
	64'b0110000000011100000000011100000011100011000011100011000000000000,
	64'b0110000000011100000000011000000001100011000011100011000000000000,
	64'b0110000000011100000000011000000001100011000011100011000000000000,
	64'b0110000000011000000000011000000001100011000011100011000000000110,
	64'b0111000000011000000000111000000001110011000011100011000000000110,
	64'b0111000000011000000000111000000001110011000011000011000000000110,
	64'b0111100000011000000000111000000001110011000111000011111110000110,
	64'b0011110000011000000000111000000001110011111111000011111110000110,
	64'b0001111000011000000000111000000001110011111110000011111110000000,
	64'b0000111100011000000000111000000001110011111110000011111110000000,
	64'b0000011110011000000000111000000001110011111110000011000000000000,
	64'b0000001110011000000000111000000001110011000110000011000000000000,
	64'b0000001110011000000000111000000001110011000111000011000000000000,
	64'b0000000110011000000000111000000001100011000111000011000000000000,
	64'b0000000111011000000000011000000001100011000011000011000000000000,
	64'b0000000111011100000000011000000001100011000011000011000000000000,
	64'b0000000111011100000000011000000011100011000011100011000000000000,
	64'b0000000111011100000000011100000011100011000011100011000000000000,
	64'b1100000110001110000011011100000011100011000011100011000000000000,
	64'b1100001110001110000111001110000111000011000001100011000000000110,
	64'b1111111110001111111111001111111111000011000001100011111111000110,
	64'b1111111100000111111110001111111110000011000001100011111111000110,
	64'b0111111100000011111110000111111110000011000001110011111111000110,
	64'b0011111000000001111000000011111100000011000001110011111111000110,
	64'b0000000000000000000000000000000000000000000000000000000000000000};

 
 // pipeline (ff) to get the pixel color from the array 	 
//////////--------------------------------------------------------------------------------------------------------------= 
always_ff@(posedge clk or negedge resetN) 
begin 
	if(!resetN) begin 
		RGBout <=	8'h00; 
	end 
	else begin 
		RGBout <= TRANSPARENT_ENCODING ; // default  
 
		if (InsideRectangle == 1'b1 ) 
		begin // inside an external bracket  
			RGBout <= (object_colors[offsetY][offsetX] ==  1 ) ? COLOR_ENCODING  : TRANSPARENT_ENCODING; 
		end  	 
		 
	end 
end 
 
//////////--------------------------------------------------------------------------------------------------------------= 
// decide if to draw the pixel or not 
assign drawingRequest = (RGBout != TRANSPARENT_ENCODING ) ? 1'b1 : 1'b0 ; // get optional transparent command from the bitmpap   
 
endmodule 
