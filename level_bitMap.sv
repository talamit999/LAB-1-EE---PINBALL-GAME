// bitmap file 
// (c) Technion IIT, Department of Electrical Engineering 2021 
// generated bythe automatic Python tool 
 
 
 module level_bitMap (

					input	logic	clk, 
					input	logic	resetN, 
					input logic	[10:0] offsetX,// offset from top left  position 
					input logic	[10:0] offsetY, 
					input	logic	InsideRectangle, //input that the pixel is within a bracket 
 
					output	logic	drawingRequest, //output that the pixel should be dispalyed 
					output	logic	[7:0] RGBout  //rgb value from the bitmap  
 ) ; 
 
 
// generating the bitmap 
 

localparam logic [7:0] COLOR_ENCODING = 8'hFF ;// RGB value in the bitmap representing the BITMAP coolor
localparam logic [7:0] TRANSPARENT_ENCODING = 8'h00 ;// RGB value in the bitmap representing a transparent pixel  
logic[0:31][0:63] object_colors = {
	64'b0000000000000000000000000000000000000000000000000000000000000000,
	64'b0110000000001111111111011100000000001100011111111110001100000000,
	64'b0110000000001111111111001100000000001100011111111110001100000000,
	64'b0110000000001111111111001100000000001100011111111110001100000000,
	64'b0110000000001100000000001100000000001100011000000000001100000000,
	64'b0110000000001100000000001110000000011100011000000000001100000000,
	64'b0110000000001100000000001110000000011100011000000000001100000000,
	64'b0110000000001100000000000110000000011000011000000000001100000000,
	64'b0110000000001100000000000110000000011000011000000000001100000000,
	64'b0110000000001100000000000111000000111000011000000000001100000000,
	64'b0110000000001100000000000111000000111000011000000000001100000000,
	64'b0110000000001100000000000011000000110000011000000000001100000000,
	64'b0110000000001100000000000011000000110000011000000000001100000000,
	64'b0110000000001100000000000011000000110000011000000000001100000000,
	64'b0110000000001111111110000011100001110000011111111100001100000000,
	64'b0110000000001111111110000011100001110000011111111100001100000000,
	64'b0110000000001111111110000001100001100000011111111100001100000000,
	64'b0110000000001100000000000001100001100000011000000000001100000000,
	64'b0110000000001100000000000001100001100000011000000000001100000000,
	64'b0110000000001100000000000001110011100000011000000000001100000000,
	64'b0110000000001100000000000001110011000000011000000000001100000000,
	64'b0110000000001100000000000000110011000000011000000000001100000000,
	64'b0110000000001100000000000000110011000000011000000000001100000000,
	64'b0110000000001100000000000000111011000000011000000000001100000000,
	64'b0110000000001100000000000000111111000000011000000000001100000000,
	64'b0110000000001100000000000000011110000000011000000000001100000000,
	64'b0110000000001100000000000000011110000000011000000000001100000000,
	64'b0110000000001100000000000000011110000000011000000000001100000000,
	64'b0111111111001111111111000000011110000000011111111110001111111110,
	64'b0111111111001111111111000000011110000000011111111110001111111111,
	64'b0111111111001111111111000000001100000000011111111110001111111110,
	64'b0000000000000000000000000000000000000000000000000000000000000000};

 
 // pipeline (ff) to get the pixel color from the array 	 
//////////--------------------------------------------------------------------------------------------------------------= 
always_ff@(posedge clk or negedge resetN) 
begin 
	if(!resetN) begin 
		RGBout <=	8'h00; 
	end 
	else begin 
		RGBout <= TRANSPARENT_ENCODING ; // default  
 
		if (InsideRectangle == 1'b1 ) 
		begin // inside an external bracket  
			RGBout <= (object_colors[offsetY][offsetX] ==  1 ) ? COLOR_ENCODING  : TRANSPARENT_ENCODING; 
		end  	 
		 
	end 
end 
 
//////////--------------------------------------------------------------------------------------------------------------= 
// decide if to draw the pixel or not 
assign drawingRequest = (RGBout != TRANSPARENT_ENCODING ) ? 1'b1 : 1'b0 ; // get optional transparent command from the bitmpap   
 
endmodule 
