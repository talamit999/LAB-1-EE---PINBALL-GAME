// bitmap file 
// (c) Technion IIT, Department of Electrical Engineering 2021 
// generated bythe automatic Python tool 
 
 
 module signs_bitMap (

					input	logic	clk, 
					input	logic	resetN, 
					input logic	[10:0] offsetX,// offset from top left  position 
					input logic	[10:0] offsetY, 
					input	logic	InsideRectangle, //input that the pixel is within a bracket
					input logic gameOver, // while '1' to show game over sign (first priority)
					input logic winGame,  // while '1' to show you won sigh (second priority)
					input logic levelUp_pulse,	 // pulse to show level up sign for 2 seconds (third priority) 
					input logic speedUp_pulse,	 // pulse to show speed up sign for 2 seconds (fourth priority)
					input logic startOfFrame, 
 
					output	logic	drawingRequest, //output that the pixel should be dispalyed 
					output	logic	[7:0] RGBout  //rgb value from the bitmap  
 ) ; 
 
 localparam logic [5:0] ZERO = 6'b0;
 localparam logic [5:0] MAX_COUNT = 6'b111111;
 
 logic [5:0] counterLevelUp = ZERO;
 logic [5:0] counterSpeedUp = ZERO;
 
 
// generating the bitmap 
 

localparam logic [7:0] COLOR_ENCODING = 8'hFF ;// RGB value in the bitmap representing the BITMAP coolor
localparam logic [7:0] TRANSPARENT_ENCODING = 8'h00 ;// RGB value in the bitmap representing a transparent pixel  

	
logic[0:3][0:31][0:63] object_colors = { 

	// game over
  {64'b0000000000000000000000000000000000000000000000000000000000000000,
	64'b0000000000000000000000000000000000000000000000000000000000000000,
	64'b0000000000000000000000000000000000000000000000000000000000000110,
	64'b0001110000110001000000100111100000111001100011111110111000000110,
	64'b0001111000110001100001101111100000111101100011111110111100000110,
	64'b0011111000110001100001101111100001111101100011111110111100000110,
	64'b0011011000110001100001101100000001100101100011110000101100000110,
	64'b0110001000110001100001101100000001000111100010110000100110000110,
	64'b0110000000110001100001101100000001000110100010110000100110000110,
	64'b0110000000110001100001101100000001000110100010110000100110000110,
	64'b0110000001110001100001101100000011000010100010110000100110000110,
	64'b0100000001110001110011101100000011000010100010110000100110000110,
	64'b0100000001111001110011101100000011000010100010110000100110000110,
	64'b0100000001011001110011101100000011000010110110110000100110000110,
	64'b0100000001011001110010101111000011000010110110111100101100000110,
	64'b0100111001011001010010101111100011000010110110111110111100000110,
	64'b0100111001001001010010101111100011000010110110111110111100000110,
	64'b0100111001001001010010101111000011000010110100111100111100000110,
	64'b0100001001001001010110101100000011000010010100110000101100000110,
	64'b0100001011111001011110101100000011000010010100110000100100000110,
	64'b0100001011111001011110101100000011000010010100110000100100000110,
	64'b0100001011111101011110101100000011000010010100110000100100000110,
	64'b0110001011111101011100101100000011000010010100110000100100000110,
	64'b0110001011001101001100101100000011000110011100110000100110000000,
	64'b0110001010001101001100101100000001000110011100110000100110000000,
	64'b0110001010001101001100101100000001000110011100110000100110000100,
	64'b0011011010000101001100101100000001101100011100110000100110000110,
	64'b0011111010000101001100101111100001111100011000111110100010000110,
	64'b0011111010000101001100101111100000111100001000111110100010000110,
	64'b0001110010000101001100100111100000111000001000111110100010000110,
	64'b0000100000000000000000000000000000010000000000000000000000000000,
	64'b0000000000000000000000000000000000000000000000000000000000000000}
	
	,
	
	// you won
  {64'b0000000000000000000000000000000000000000000000000000000000000100,
	64'b0000000000000000000000000000000000000000000000000000000000000100,
	64'b0100001000111000010000010000010000100001100011100001100001000100,
	64'b0100001001111100010000010000010000100001100111110001100001000100,
	64'b0100001001111110010000010000010000100001101111110001100001000100,
	64'b0110001011100110010000010000010000100001001100111001100001000100,
	64'b0110011011000110010000010000010000110001001100011001100001000100,
	64'b0110011011000010010000010000010001110001001000011001110001000100,
	64'b0010010010000010010000010000010001110001001000001001110001000100,
	64'b0010010010000010010000010000011001110001011000001001110001000100,
	64'b0010010010000011010000010000011001110001011000001001010001000100,
	64'b0011010010000011010000010000011001010011011000001001010001000100,
	64'b0011110010000011010000010000001001010011011000001001011001000100,
	64'b0001110110000011010000010000001001010011010000001001011001000100,
	64'b0001100110000011010000010000001001010010010000001001011001000100,
	64'b0001100110000011010000010000001001010010010000001001001001000100,
	64'b0001100110000011010000010000001001011010010000001001001001000100,
	64'b0001100110000011010000010000001001011010010000001001001101000100,
	64'b0001100110000011010000010000001011011010011000001001001101000100,
	64'b0001100010000011010000010000001111001010011000001001001101000100,
	64'b0001100010000011010000010000001111001010011000001001000101000100,
	64'b0001100010000010011000010000001110001110011000001001000111000100,
	64'b0001100010000010011000010000000110001110011000001001000111000100,
	64'b0001100010000010011000010000000110001110001000011001000111000000,
	64'b0001100011000110011000110000000110001100001000011001000111000000,
	64'b0001100011000110001000110000000110001100001100011001000011000100,
	64'b0001100011111110001111100000000110001100001111110001000011000100,
	64'b0001100001111100001111100000000110001100001111110001000011000100,
	64'b0001100001111100000111100000000110001100000111100001000011000100,
	64'b0000000000111000000011000000000000000100000011000001000000000100,
	64'b0000000000000000000000000000000000000000000000000000000000000000,
	64'b0000000000000000000000000000000000000000000000000000000000000000}
	
	,
	
	// level up 
  {64'b0000000000000000000000000000000000000000000000000000000000000000,
	64'b0000000000000000000000000000000000000000000000000000000000000000,
	64'b0000000000000000000000000000000000000000000000000000001000000000,
	64'b0000000010000111101000010111100100000010000101110000001000000000,
	64'b0000000010000111101000010111100100000010000101111000001000000000,
	64'b0000000010000111101000010111100100000010000101111000001000000000,
	64'b0000000010000100001000010100000100000010000101001100001000000000,
	64'b0000000010000100001000010100000100000010000101001100001000000000,
	64'b0000000010000100001000010100000100000010000101000100001000000000,
	64'b0000000010000100001100010100000100000010000101000100001000000000,
	64'b0000000010000100000100010100000100000010000101000100001000000000,
	64'b0000000010000100000100100100000100000010000101000100001000000000,
	64'b0000000010000100000100100100000100000010000101000100001000000000,
	64'b0000000010000100000100100100000100000010000101000100001000000000,
	64'b0000000010000111100100100111100100000010000101000100001000000000,
	64'b0000000010000111100100100111100100000010000101001100001000000000,
	64'b0000000010000111100100100111100100000010000101111000001000000000,
	64'b0000000010000100000100100100000100000010000101111000001000000000,
	64'b0000000010000100000100100100000100000010000101111000001000000000,
	64'b0000000010000100000110100100000100000010000101110000001000000000,
	64'b0000000010000100000010100100000100000010000101000000001000000000,
	64'b0000000010000100000011000100000100000010000101000000001000000000,
	64'b0000000010000100000011000100000100000010000101000000001000000000,
	64'b0000000010000100000011000100000100000010001001000000000000000000,
	64'b0000000010000100000011000100000100000010001001000000000000000000,
	64'b0000000010000100000011000100000100000011001001000000000000000000,
	64'b0000000010000100000011000100000100000001001001000000001000000000,
	64'b0000000011110111100011000111100111100001111001000000001100000000,
	64'b0000000011110111100011000111100111100001111001000000001000000000,
	64'b0000000001110111100001000111100111100000110001000000001000000000,
	64'b0000000000000000000000000000000000000000000000000000000000000000,
	64'b0000000000000000000000000000000000000000000000000000000000000000}
	
	,
	// speed up
  {64'b0000000000000000000000000000000000000000000000000000000000000000,
	64'b0000000000000000000000000000000000000000000000000000000000010000,
	64'b0000011000111000011110011111001110000000100001000111000000010000,
	64'b0000011100111100011110011111011111000000100001001111000000010000,
	64'b0000111100111110011110011111011111000000100001001111100000010000,
	64'b0000110100111110010000010000011011100000100001001101100000010000,
	64'b0000100000100110010000010000011001100000100001001100100000010000,
	64'b0000100000100010010000010000011000100000100001001100100000010000,
	64'b0000100000100010010000010000011000100000100001001100110000010000,
	64'b0000100000100010010000010000011000110000100001001100110000010000,
	64'b0000100000100010010000010000011000110000100001001100110000010000,
	64'b0000100000100010010000010000011000110000100001001100110000010000,
	64'b0000110000100010010000010000011000010000100001001100100000010000,
	64'b0000110000100010010000010000011000010000100001001100100000010000,
	64'b0000011000100010011110011110011000010000100001001100100000010000,
	64'b0000011100100110011110011110011000010000100001001101100000010000,
	64'b0000001100111110011110011110011000010000100001001111100000010000,
	64'b0000001100111100010000010000011000010000100001001111000000010000,
	64'b0000000110111000010000010000011000010000100001001111000000010000,
	64'b0000000110100000010000010000011000010000100001001100000000010000,
	64'b0000000010100000010000010000011000110000100001001100000000010000,
	64'b0000000010100000010000010000011000110000100001001100000000010000,
	64'b0000000010100000010000010000011000100000100001001100000000010000,
	64'b0000000010100000010000010000011000100000110001001100000000000000,
	64'b0000000110100000010000010000011000100000110001001100000000000000,
	64'b0000100110100000010000010000011001100000010011001100000000010000,
	64'b0000111100100000011110011111011111100000011111001100000000010000,
	64'b0000111100100000011111011111011111000000011110001100000000010000,
	64'b0000111100100000011111011111011110000000001110001100000000010000,
	64'b0000011000000000000000000000000000000000000100000000000000000000,
	64'b0000000000000000000000000000000000000000000000000000000000000000,
	64'b0000000000000000000000000000000000000000000000000000000000000000}
	
	};


 
 // pipeline (ff) to get the pixel color from the array 	 
//////////--------------------------------------------------------------------------------------------------------------= 
always_ff@(posedge clk or negedge resetN) 
begin 
	if(!resetN) begin 
		RGBout <=	8'h00; 
		counterLevelUp <= ZERO; 
		counterSpeedUp <= ZERO;
	end 
	else begin 
		RGBout <= TRANSPARENT_ENCODING ; // default 
	
		if(levelUp_pulse) 	
			counterLevelUp <= MAX_COUNT;
		if(speedUp_pulse)
			counterSpeedUp <= MAX_COUNT; 
		
		// if start of frame, reduce counters 
		if(startOfFrame) begin
			if(counterLevelUp > ZERO)
				counterLevelUp <= counterLevelUp - 1;
			if(counterSpeedUp > ZERO)
				counterSpeedUp <= counterSpeedUp - 1;
		end
		
		// inside an external bracket
		if (InsideRectangle == 1'b1 ) 
		begin  // divide by 2 - to extend the bitmap (each bit replicates to 2*2 bits)
			if(gameOver)
				RGBout <= (object_colors[0][offsetY[10:1]][offsetX[10:1]] ==  1 ) ? COLOR_ENCODING  : TRANSPARENT_ENCODING;
			else begin 
				if(winGame)
					RGBout <= (object_colors[1][offsetY[10:1]][offsetX[10:1]] ==  1 ) ? COLOR_ENCODING  : TRANSPARENT_ENCODING;
				else begin
					if(counterLevelUp > ZERO)
						RGBout <= (object_colors[2][offsetY[10:1]][offsetX[10:1]] ==  1 ) ? COLOR_ENCODING  : TRANSPARENT_ENCODING;
					else begin 
						if(counterSpeedUp > ZERO)
							RGBout <= (object_colors[3][offsetY[10:1]][offsetX[10:1]] ==  1 ) ? COLOR_ENCODING  : TRANSPARENT_ENCODING;
					end 
				end
			end 
		end  	 
		 
	end 
end 
 
//////////--------------------------------------------------------------------------------------------------------------= 
// decide if to draw the pixel or not 
assign drawingRequest = (RGBout != TRANSPARENT_ENCODING ) ? 1'b1 : 1'b0 ; // get optional transparent command from the bitmpap   
 
endmodule 
